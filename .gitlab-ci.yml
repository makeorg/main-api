#  Make.org Core API
#  Copyright (C) 2018 Make.org
#
# This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Affero General Public License as
#  published by the Free Software Foundation, either version 3 of the
#  License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Affero General Public License for more details.
#
#  You should have received a copy of the GNU Affero General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.

image: makeorg/docker-sbt-coursier

variables:
  CI_BUILD: "true"
  SBT_OPTS: "-Xms2G -Xmx2G"
  IMAGE: "make-api"

stages:
  - build
  - push
  - deploy
  - reindex
  - non-regression
  - merge

tests-coverage:
  stage: build
  tags:
    - docker
  before_script:
    - mkdir -p /var/lib/docker
    - mount -t tmpfs -o size=12G tmpfs /var/lib/docker
    - if [ ! -e /var/run/docker.sock ]; then DOCKER_DRIVER=overlay2 dockerd & fi
    - until docker ps; do echo "waiting for docker to be up..."; sleep 0.5; done
    - docker login "https://$NEXUS_URL" --username "$NEXUS_USER" --password "$NEXUS_PASSWORD"
    - export IMAGE_VERSION=`git rev-parse --short=10 HEAD`
    - export SEARCH_CODE=`curl -s -w '%{http_code}' -u $NEXUS_USER:$NEXUS_PASSWORD -o /dev/null "https://$NEXUS_URL/service/rest/beta/search/assets/download?name=$IMAGE&version=$IMAGE_VERSION"`
  script:
    - echo $SEARCH_CODE
    - >
      if [[ $SEARCH_CODE == "404" ]];then
        sbt clean coverage test it:test
        sbt coverageReport coverageAggregate
        sbt codacyCoverage
      fi

build-image:
  stage: build
  tags:
    - docker
  before_script:
    - export IMAGE_VERSION=`git rev-parse --short=10 HEAD`
    - mkdir -p /var/lib/docker
    - mount -t tmpfs -o size=12G tmpfs /var/lib/docker
    - if [ ! -e /var/run/docker.sock ]; then DOCKER_DRIVER=overlay2 dockerd & fi
    - until docker ps; do echo "waiting for docker to be up..."; sleep 0.5; done
    - docker login "https://$NEXUS_URL" --username "$NEXUS_USER" --password "$NEXUS_PASSWORD"
    - echo $(docker pull $NEXUS_URL/$IMAGE:$IMAGE_VERSION)
  script:
    - >
      if [[ -z $(docker images -q $NEXUS_URL/$IMAGE:$IMAGE_VERSION) ]];then
        sbt publishLocal
      fi
    - mkdir dist
    - docker save ${NEXUS_URL}/${IMAGE}:${IMAGE_VERSION} -o dist/image.tar.gz
  artifacts:
    paths:
      - dist/image.tar.gz

push-image:
  stage: push
  tags:
    - docker
  before_script:
    - export IMAGE_VERSION=`git rev-parse --short=10 HEAD`
    - mkdir -p /var/lib/docker
    - mount -t tmpfs -o size=12G tmpfs /var/lib/docker
    - if [ ! -e /var/run/docker.sock ]; then DOCKER_DRIVER=overlay2 dockerd & fi
    - until docker ps; do echo "waiting for docker to be up..."; sleep 0.5; done
    - docker login "https://${NEXUS_URL}" --username "${NEXUS_USER}" --password "${NEXUS_PASSWORD}"
    - export SEARCH_CODE=`curl -s -w '%{http_code}' -u $NEXUS_USER:$NEXUS_PASSWORD -o /dev/null "https://$NEXUS_URL/service/rest/beta/search/assets/download?name=$IMAGE&version=$IMAGE_VERSION"`
  script:
    - ls -lah
    - ls -lah ./dist/
    - docker load -i dist/image.tar.gz
    - >
      if [[ $SEARCH_CODE == "404" ]];then
        docker push ${NEXUS_URL}/${IMAGE}:${IMAGE_VERSION}
      fi
    - docker tag $NEXUS_URL/$IMAGE:$IMAGE_VERSION $NEXUS_URL/$IMAGE:$CI_COMMIT_REF_NAME-latest
    - docker push $NEXUS_URL/$IMAGE:$CI_COMMIT_REF_NAME-latest

merge-to-prod:
  stage: merge
  when: manual
  dependencies: []
  only:
    - preproduction
  allow_failure: false
  script:
    - mkdir -p ~/.ssh/
    - chmod 700 ~/.ssh
    - ssh-keyscan -t rsa gitlab.com > ~/.ssh/known_hosts
    - echo "${DEPLOY_PRIVATE_KEY}" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - export CI_PUSH_REPO=`echo $CI_REPOSITORY_URL | perl -pe 's#.*@(.+?(\:\d+)?)/#git@\1:#'`
    - echo "Target repo is ${CI_PUSH_REPO}"
    - git config --global user.email "${GITLAB_USER_EMAIL}"
    - git config --global user.name "${GITLAB_USER_NAME}"
    - git remote set-url origin "${CI_PUSH_REPO}"
    - git checkout production
    - git merge --ff-only origin/preproduction
    - git push origin production:production

deploy-preproduction:
  stage: deploy
  environment:
    name: preproduction
  dependencies: []
  only:
    - preproduction
  script:
    - >
      job_id=$(curl -s -X "POST" \
        -H "Accept: application/json" \
        -H "Content-Type: application/x-www-form-urlencoded" \
        -H "X-Rundeck-Auth-Token: ${RUNDECK_PREPROD_TOKEN}" \
        --data-urlencode "argString=-version $CI_COMMIT_REF_NAME-latest" \
        ${RUNDECK_PREPROD_URL}/api/16/job/${RUNDECK_PREPROD_JOB_ID}/run \
        | jq -r '.id')

      [[ "${job_id}" =~ ^[0-9]+$ ]] && echo "Job ${job_id} started ..." \
      || { echo "Rundeck Job is not correctly launched"; exit 1; };

      status='running';
      while [ "${status}" == 'running' ]; do
        status=$(curl -s -X "GET" \
          -H "Accept: application/json" \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -H "X-Rundeck-Auth-Token: ${RUNDECK_PREPROD_TOKEN}" \
          ${RUNDECK_PREPROD_URL}/api/16/execution/${job_id} \
          | jq -r '.status');
        [ "${status}" == 'running' ] \
        && { echo -e "Job ${job_id} is still running ... \nWaiting 5s ..."; sleep 5; };
      done;

      [ "${status}" != 'succeeded' ] && { echo -e "Job ${job_id} has ${status}."; exit 2; };
      echo "Job ${job_id} has ${status}.";

reindex-preproduction:
  stage: reindex
  environment:
    name: preproduction
  dependencies: []
  only:
    - preproduction
  script:
    - >
      job_id=$(curl -s -X "POST" \
        -H "Accept: application/json" \
        -H "Content-Type: application/x-www-form-urlencoded" \
        -H "X-Rundeck-Auth-Token: ${RUNDECK_PREPROD_TOKEN}" \
        ${RUNDECK_PREPROD_URL}/api/16/job/${RUNDECK_PREPROD_REINDEX_JOB_ID}/run \
        | jq -r '.id')

      [[ "${job_id}" =~ ^[0-9]+$ ]] && echo "Job ${job_id} started ..." \
      || { echo "Rundeck Job is not correctly launched"; exit 1; };

      status='running';
      while [ "${status}" == 'running' ]; do
        status=$(curl -s -X "GET" \
          -H "Accept: application/json" \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -H "X-Rundeck-Auth-Token: ${RUNDECK_PREPROD_TOKEN}" \
          ${RUNDECK_PREPROD_URL}/api/16/execution/${job_id} \
          | jq -r '.status');
        [ "${status}" == 'running' ] \
        && { echo -e "Job ${job_id} is still running ... \nWaiting 5s ..."; sleep 5; };
      done;

      [ "${status}" != 'succeeded' ] && { echo -e "Job ${job_id} has ${status}."; exit 2; };
      echo "Job ${job_id} has ${status}.";

non-regression-tests:
  stage: non-regression
  environment:
    name: preproduction
  dependencies: []
  only:
    - preproduction
  script:
    - >
      job_id=$(curl -s -X "POST" \
        -H "Accept: application/json" \
        -H "Content-Type: application/x-www-form-urlencoded" \
        -H "X-Rundeck-Auth-Token: ${RUNDECK_PREPROD_TOKEN}" \
        ${RUNDECK_PREPROD_URL}/api/16/job/${RUNDECK_PREPROD_NON_REGRESSION_JOB_ID}/run \
        | jq -r '.id')

      [[ "${job_id}" =~ ^[0-9]+$ ]] && echo "Job ${job_id} started ..." \
      || { echo "Rundeck Job is not correctly launched"; exit 1; };

      status='running';
      while [ "${status}" == 'running' ]; do
        status=$(curl -s -X "GET" \
          -H "Accept: application/json" \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -H "X-Rundeck-Auth-Token: ${RUNDECK_PREPROD_TOKEN}" \
          ${RUNDECK_PREPROD_URL}/api/16/execution/${job_id} \
          | jq -r '.status');
        [ "${status}" == 'running' ] \
        && { echo -e "Job ${job_id} is still running ... \nWaiting 5s ..."; sleep 5; };
      done;

      [ "${status}" != 'succeeded' ] && { echo -e "Job ${job_id} has ${status}."; exit 2; };
      echo "Job ${job_id} has ${status}.";

deploy-production:
  stage: deploy
  environment:
    name: production
  dependencies: []
  only:
    - production
  script:
    - >
      job_id=$(curl -s -X "POST" \
        -H "Accept: application/json" \
        -H "Content-Type: application/x-www-form-urlencoded" \
        -H "X-Rundeck-Auth-Token: ${RUNDECK_PROD_TOKEN}" \
        --data-urlencode "argString=-version $CI_COMMIT_REF_NAME-latest" \
        ${RUNDECK_PROD_URL}/api/16/job/${RUNDECK_PROD_JOB_ID}/run \
        | jq -r '.id')

      [[ "${job_id}" =~ ^[0-9]+$ ]] && echo "Job ${job_id} started ..." \
      || { echo "Rundeck Job is not correctly launched"; exit 1; };

      status='running';
      while [ "${status}" == 'running' ]; do
        status=$(curl -s -X "GET" \
          -H "Accept: application/json" \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -H "X-Rundeck-Auth-Token: ${RUNDECK_PROD_TOKEN}" \
          ${RUNDECK_PROD_URL}/api/16/execution/${job_id} \
          | jq -r '.status');
        [ "${status}" == 'running' ] \
        && { echo -e "Job ${job_id} is still running ... \nWaiting 5s ..."; sleep 5; };
      done;

      [ "${status}" != 'succeeded' ] && { echo -e "Job ${job_id} has ${status}."; exit 2; };
      echo "Job ${job_id} has ${status}.";

reindex-production:
  stage: reindex
  environment:
    name: production
  dependencies: []
  only:
    - production
  script:
    - >
      job_id=$(curl -s -X "POST" \
        -H "Accept: application/json" \
        -H "Content-Type: application/x-www-form-urlencoded" \
        -H "X-Rundeck-Auth-Token: ${RUNDECK_PROD_TOKEN}" \
        ${RUNDECK_PROD_URL}/api/16/job/${RUNDECK_PROD_REINDEX_JOB_ID}/run \
        | jq -r '.id')

      [[ "${job_id}" =~ ^[0-9]+$ ]] && echo "Job ${job_id} started ..." \
      || { echo "Rundeck Job is not correctly launched"; exit 1; };

      status='running';
      while [ "${status}" == 'running' ]; do
        status=$(curl -s -X "GET" \
          -H "Accept: application/json" \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -H "X-Rundeck-Auth-Token: ${RUNDECK_PROD_TOKEN}" \
          ${RUNDECK_PROD_URL}/api/16/execution/${job_id} \
          | jq -r '.status');
        [ "${status}" == 'running' ] \
        && { echo -e "Job ${job_id} is still running ... \nWaiting 5s ..."; sleep 5; };
      done;

      [ "${status}" != 'succeeded' ] && { echo -e "Job ${job_id} has ${status}."; exit 2; };
      echo "Job ${job_id} has ${status}.";
