akka {

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"

    serializers {
      make-serializer = "org.make.api.technical.MakeEventSerializer"
    }
    serialization-bindings {
      "org.make.core.MakeSerializable" = make-serializer
    }
  }

  cluster {

    //    This can be used to react to down nodes
    //    downing-provider-class = "org.make.api.technical.cluster.MakeDowningProvider"

    run-coordinated-shutdown-when-down = true

    role {
      seed {
        min-nr-of-members = 1
      }
      worker {
        min-nr-of-members = 1
      }
    }
    roles = ["seed", "worker"]
    seed-nodes = []

    sharding {
      guardian-name = sharding
      remember-entities = on
      state-store-mode = persistence
      role = "worker"

      snapshot-plugin-id = "cassandra-snapshot-store"
      journal-plugin-id = "cassandra-journal"
    }
  }

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  persistence {
    journal {
      plugin = cassandra-journal
    }
    snapshot-store {
      plugin = cassandra-snapshot-store
    }
    role = "worker"
  }

  remote {
    log-remote-lifecycle-events = on
    netty.tcp {
      hostname = "localhost"
      hostname = ${?HOSTNAME}
      hostname = ${?TCP_HOST}
      port = 2551
      port = ${?TCP_PORT}
    }
  }

  http.client.connecting-timeout = "2 seconds"
}

kamon {

  jmx {
    subscriptions {
      histogram = ["**"]
      min-max-counter = ["**"]
      gauge = ["**"]
      counter = ["**"]
      trace = ["**"]
      trace-segment = ["**"]
      akka-actor = ["**"]
      akka-dispatcher = ["**"]
      akka-router = ["**"]
      system-metric = ["**"]
      http-server = ["**"]
    }
  }

  modules {
    kamon-mxbeans {
      auto-start = no
      requires-aspectj = no
    }
    akka-actor {
      auto-start = yes
      requires-aspectj = yes
    }
    akka-dispatcher {
      auto-start = yes
      requires-aspectj = yes
    }
    akka-router {
      auto-start = yes
      requires-aspectj = yes
    }
  }

  # What should be recorder
  metric {
    filters {
      akka-actor {
        includes = ["**"]
        excludes = ["make-api/system/cluster","make-api/system/cluster/**"]
      }
      akka-dispatcher {
        includes = ["**"]
      }
      akka-router {
        includes = [ "**" ]
      }

      trace {
        includes = ["**"]
        excludes = []
      }
    }
  }
}

make-api {

  front-url = "http://localhost:9009"
  front-url = ${?FRONT_URL}

  cluster {
    # Name of the akka actor systems, to allow multiple systems on the same consul
    name = "make-local"
    name = ${?CONTEXT_NAME}

    backend = "consul"

    consul {
      http-url = "http://localhost:8500"
      http-url = ${?CONSUL_URL}
    }

    # Interval on which heartbeat is updated
    heartbeat-interval = "30 seconds"
    # Time of the consul session, kept small in order to react quickly on seeds down
    session-timeout = "30 seconds"
    # Number of connection retries before trying to become a seed at start time
    retries-before-seeding = 3
    # duration between each session renew
    session-renew-interval = "20 seconds"
    # duration needed to declare a node as down
    node-timeout = "2 minutes"
    # interval to cleanup timeout nodes
    cleanup-interval = "1 hour"

  }

  database {
    jdbc-url = "jdbc:postgresql://localhost:26257/makeapi"
    jdbc-url = ${?JDBC_URL}
    user = "root"
    user = ${?DB_USER}
    password = ""
    password = ${?DB_PASSWORD}
    pools {
      read {
        max-total = 50
        initial-size = 10
        max-idle = 10
      }
      write {
        max-total = 20
        initial-size = 10
        max-idle = 10
      }
    }
    auto-create-db-schemas = true
  }

  dev {
    send-test-data = true
  }

  elasticSearch {
    connection-string = "localhost:9200"
    connection-string = ${?ES_URL}
  }

  http {
    host = "0.0.0.0"
    host = ${?HTTP_HOST}
    port = 9000
    port = ${?HTTP_PORT}
    ssl = false
    ssl = ${?SSL}
  }

  kafka {
    connection-string = "localhost:9092"
    connection-string = ${?KAFKA_URI}
    poll-timeout = 10000
    schema-registry = "http://localhost:18081"
    schema-registry = ${?AVRO_REGISTRY_URL}
    topics {
      emails = "emails"
      emails = ${?KAFKA_EMAIL_TOPIC}
      mailjet-events = "mailjet-events"
      mailjet-events = ${?KAFKA_MAILJET_EVENT_TOPIC}
      proposals = "proposals"
      proposals = ${?KAFKA_PROPOSALS_TOPIC}
      users = "users"
      users = ${?KAFKA_USER_TOPIC}
      votes = "votes"
      votes = ${?KAFKA_VOTE_TOPIC}
    }
  }

  mail-jet {
    url = "https://api.mailjet.com/v3.1/send"
    api-key = "e8a39a3f1b830a862dee1cdf8a0db010"
    api-key = ${?MAILJET_API_KEY}
    secret-key = "53029be5adf77aece4e6e381d282d16b"
    secret-key = ${?MAILJET_SECRET_KEY}
    basic-auth-login = "make-mailjet"
    basic-auth-login = ${?MAILJET_AUTH_LOGIN}
    basic-auth-password = "tejliam-ekam"
    basic-auth-password = ${?MAILJET_AUTH_PASSWORD}

    templates {
      from = "contact@make.org"
      from = ${?MAILJET_FROM}

      from-name = "make.org"
      from-name = ${?MAILJET_FROM_NAME}

      registration-template-id = "206730"
      registration-template-id = ${?MAILJET_TEMPLATE_REGISTRATION}

      reset-password-template-id = "206729"
      reset-password-template-id = ${?MAILJET_TEMPLATE_RESET_PASSWORD}

      resend-validation-email-template-id = "206730"
      resend-validation-email-template-id = ${?MAILJET_TEMPLATE_RESET_PASSWORD}

      proposal-sent-template-id = "206728"
      proposal-sent-template-id = ${?MAILJET_TEMPLATE_PROPOSAL_SENT}

      proposal-validated-template-id = "206727"
      proposal-validated-template-id = ${?MAILJET_TEMPLATE_PROPOSAL_VALIDATED}
    }
  }

  authentication {
    default-client-id = "0cdd82cb-5cc0-4875-bb54-5c3709449429"
    default-client-id = ${?DEFAULT_CLIENT_ID}
    default-client-secret = "f4f7076e-6337-41d5-b000-3726ead0ae41"
    default-client-secret = ${?DEFAULT_CLIENT_SECRET}
  }

  passivate-timeout = "2 minutes"
}
