akka {

  actor {

    debug {
      lifecycle = off
      log-sent-messages = off
    }

    provider = "akka.cluster.ClusterActorRefProvider"

    kryo {
      type = "graph"
      idstrategy = "default"
      post-serialization-transformations = "lz4"
      implicit-registration-logging = true
    }

    serializers {
      make-serializer = "org.make.api.technical.MakeEventSerializer"
      kryo-serializer = "com.romix.akka.serialization.kryo.KryoSerializer"
    }
    serialization-bindings {
      "org.make.core.MakeSerializable" = make-serializer
      "java.io.Serializable" = kryo-serializer
    }
  }

  cluster {
    role {
      seed {
        min-nr-of-members = 1
      }
      worker {
        min-nr-of-members = 1
      }
    }
    roles = ["seed", "worker"]

    run-coordinated-shutdown-when-down = true

    seed-nodes = []

    sharding {
      guardian-name = sharding
      remember-entities = false
      state-store-mode = ddata
      role = "worker"
    }
  }

  extensions = [de.heikoseeberger.constructr.ConstructrExtension, com.romix.akka.serialization.kryo.KryoSerializationExtension]

  http.client.connecting-timeout = "2 seconds"

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  persistence {
    journal {
      plugin = cassandra-journal
    }
    snapshot-store {
      plugin = cassandra-snapshot-store
    }
    role = "worker"
  }

  remote {
    artery {
      enabled = on
      transport = tcp
      canonical.hostname = "localhost"
      canonical.hostname = ${?HOSTNAME}
      canonical.hostname = ${?TCP_HOST}
      canonical.port = 2551
      canonical.port = ${?TCP_PORT}
    }
    log-remote-lifecycle-events = off
  }
}

constructr {
  coordination {
    nodes = ${make-api.zookeeper.url}

    zookeeper.rootpath = "/make-api"
  }

  coordination-timeout = "3 seconds"
  join-timeout = "15 seconds"
  max-nr-of-seed-nodes = -1
  refresh-interval = "10 seconds"
  nr-of-retries = 2
  retry-delay = "2 seconds"
  ttl-factor = 3.1
}

kamon {

  akka.ask-pattern-timeout-warning = "lightweight"

  akka-http.name-generator = "org.make.api.technical.MakeOperationNameGenerator"

  prometheus {
    embedded-server {
      # Hostname and port used by the embedded web server to publish the scraping enpoint.
      hostname = "0.0.0.0"
      hostname = ${?HTTP_HOST}
      port = 4000
      port = ${?MONITORING_PORT}
    }
  }

  system-metrics {
    host.enabled = false
  }

  cluster-sharding {
    regions = [
      "proposal",
      "user-history",
      "session-history"
    ],
    refresh-interval = "20 seconds"
    stats-timeout = "5 seconds"
  }

  subscriptions {
    akka-http-server = [ "**" ]
  }
  # What should be recorder
  util {
    filters {
      "akka.tracked-actor" {
        includes = ["*/user/make-api/**"]
        excludes = ["*/system/**", "*/user/make-api/health-checks/**"]
      }
      "akka.tracked-dispatcher" {
        includes = ["*/akka.actor.default-dispatcher"]
      }
      "akka.tracked-router" {
        includes = [ "**" ]
      }

      system-metric {
        includes = [ "**" ]
      }

      trace {
        includes = ["**"]
        excludes = []
      }
    }
  }
}

make-api {

  authentication {
    default-client-id = "0cdd82cb-5cc0-4875-bb54-5c3709449429"
    default-client-id = ${?DEFAULT_CLIENT_ID}
    default-client-secret = "f4f7076e-6337-41d5-b000-3726ead0ae41"
    default-client-secret = ${?DEFAULT_CLIENT_SECRET}
  }

  authorized-cors-uri: ["http://localhost:9009", "http://localhost:4242"]
  authorized-cors-uri: ${?AUTHORIZED_CORS_URI}

  cookie-visitor {
    is-secure = false
    is-secure = ${?VISITOR_COOKIE_IS_SECURE}
  }

  cookie-session {
    lifetime = "20 minutes"
    lifetime = ${?SESSION_COOKIE_LIFETIME}
    is-secure = false
    is-secure = ${?SESSION_COOKIE_IS_SECURE}
  }

  database {
    jdbc-url = "jdbc:postgresql://localhost:26257/makeapi"
    jdbc-url = ${?JDBC_URL}
    user = "root"
    user = ${?DB_USER}
    password = ""
    password = ${?DB_PASSWORD}
    pools {
      read {
        max-total = 50
        initial-size = 10
        max-idle = 10
      }
      write {
        max-total = 50
        initial-size = 10
        max-idle = 10
      }
    }
    migration {
      init-schema = true
      baseline-version = "1.1"
    }
  }

  default-admin {
    first-name: "admin"
    email: "admin@make.org"
    password: "admin"
  }

  dev {
    # This environment is dynamic (dev + review app),
    # which means data are wiped regularly and we need to insert fixtures
    environment-type = "dynamic"
  }

  duplicate-detector {
    max-results = 25
    max-results = ${?DUPLICATE_DETECTOR_MAX_RESULTS}
  }

  elasticSearch {
    connection-string = "localhost:9200"
    connection-string = ${?ES_URL}
    index-name = "make"
    index-name = ${?ES_INDEX_NAME}
    alias-name = "make_alias"
    alias-name = ${?ES_ALIAS_NAME}
  }

  http {
    host = "0.0.0.0"
    host = ${?HTTP_HOST}
    port = 9000
    port = ${?HTTP_PORT}
    ssl = false
    ssl = ${?SSL}
  }

  kafka {
    connection-string = "localhost:9092"
    connection-string = ${?KAFKA_URI}
    poll-timeout = 10000
    schema-registry = "http://localhost:18081"
    schema-registry = ${?AVRO_REGISTRY_URL}
    topics {
      emails = "emails"
      emails = ${?KAFKA_EMAIL_TOPIC}
      mailjet-events = "mailjet-events"
      mailjet-events = ${?KAFKA_MAILJET_EVENT_TOPIC}
      crm-contact = "crm-contact"
      crm-contact = ${?KAFKA_CRM_CONTACT_TOPIC}
      proposals = "proposals"
      proposals = ${?KAFKA_PROPOSALS_TOPIC}
      users = "users"
      users = ${?KAFKA_USER_TOPIC}
      // Topic was changed when data structure changed.
      duplicates-predicted = "proposal-duplicates-predicted"
      duplicates-predicted = ${?KAFKA_DUPLICATE_PREDICTED_TOPIC}
      sequences = "sequences"
      sequences = ${?KAFKA_SEQUENCES_TOPIC}
      // Topic was changed when data structure changed.
      tracking-events = "external-tracking-events"
      tracking-events = ${?KAFKA_TRACKING_EVENTS_TOPIC}
      ideas = "ideas"
      ideas = ${?KAFKA_IDEAS_TOPIC}
      users-update = "users-update"
      users-update = ${?KAFKA_USERS_UPDATE_TOPIC}
    }
  }

  mail-jet {
    http-buffer-size = 10
    url = "https://api.mailjet.com"
    api-key = "e8a39a3f1b830a862dee1cdf8a0db010"
    api-key = ${?MAILJET_API_KEY}
    secret-key = "53029be5adf77aece4e6e381d282d16b"
    secret-key = ${?MAILJET_SECRET_KEY}
    campaign-api-key = "b7a8b715b4f145cdac33956c3195a4ed"
    campaign-api-key = ${?CAMPAIGN_MAILJET_API_KEY}
    campaign-secret-key = "fd1d2cff1aa4338056e93571f68ff805"
    campaign-secret-key = ${?CAMPAIGN_MAILJET_SECRET_KEY}
    basic-auth-login = "make-mailjet"
    basic-auth-login = ${?MAILJET_AUTH_LOGIN}
    basic-auth-password = "ZUtV95wY56YziEr5"
    basic-auth-password = ${?MAILJET_AUTH_PASSWORD}

    user-list {
      hard-bounce-list-id = "1947292"
      hard-bounce-list-id = ${?MAILJET_HARD_BOUNCE_LIST_ID}
      unsubscribe-list-id = "1947293"
      unsubscribe-list-id = ${?MAILJET_UNSUB_LIST_ID}
      opt-in-list-id = "1947291"
      opt-in-list-id = ${?MAILJET_OPTIN_LIST_ID}
      batch-size = 250
      batch-size = ${?MAILJET_USER_LIST_BATCH_SIZE}
    }

    templates {
      from = "emailing@make.org"
      from-name = "make.org"
      front-url = "http://localhost:9009"

      registration {
        template-id = "225362"
        enabled = true
        custom-campaign = null
        monitoring-category = "account"
        core {
          template-id = "225362"
          FR {
            template-id = "225362"
          }
          GB {
            template-id = "313838"
          }
          IT {
            template-id = "313847"
          }
        }
        vff {
          template-id = "228778"
          FR {
            template-id = "228778"
          }
          GB {
            template-id = "313838"
          }
          IT {
            template-id = "313847"
          }
        }
        climatparis {
          template-id = "283908"
        }
        lpae {
          template-id = "308018"
        },
        mieux-vivre-ensemble {
          template-id = "315238"
        },
        chance-aux-jeunes {
          template-id = "345560"
        }
      }

      welcome {
        template-id = "235799"
        enabled = true
        custom-campaign = null
        monitoring-category = "welcome"
        core {
          template-id = "235799"
          FR {
            template-id = "235799"
          }
          GB {
            template-id = "313850"
          }
          IT {
            template-id = "313857"
          }
        }
        vff {
          template-id = "239520"
          FR {
            template-id = "239520"
          }
          GB {
            template-id = "313850"
          }
          IT {
            template-id = "313857"
          }
        }
        climatparis {
          template-id = "283902"
        }
        lpae {
          template-id = "308023"
        }
        mieux-vivre-ensemble {
          template-id = "315246"
        }
        chance-aux-jeunes {
          template-id = "345561"
        }
      }

      resend-validation-link {
        template-id = "225375"
        enabled = true
        custom-campaign = null
        monitoring-category = "account"
      }

      forgotten-password {
        template-id = "225361"
        FR {
          template-id = "225361"
        }
        GB {
          template-id = "313871"
        }
        IT {
          template-id = "313880"
        }
        enabled = true
        custom-campaign = null
        monitoring-category = "account"
      }

      proposal-refused {
        template-id = "225359"
        FR {
          template-id = "225359"
        }
        GB {
          template-id = "313868"
        }
        IT {
          template-id = "313876"
        }
        enabled = true
        custom-campaign = null
        monitoring-category = "moderation"
        organisation {
          template-id = "408740"
        }

      }

      proposal-accepted {
        template-id = "225358"
        FR {
          template-id = "225358"
        }
        GB {
          template-id = "313860"
        }
        IT {
          template-id = "313865"
        }
        enabled = true
        custom-campaign = null
        monitoring-category = "moderation"
        organisation {
          template-id = "408749"
        }
      }
    }
  }

  newsletter-url = "https://webflow.com/api/v1/form/59833d390a24e50001b873d8"
  newsletter-url = ${?NEWSLETTER_URL}

  oauth {
    access-token-lifetime = 1800
    access-token-lifetime = ${?ACCESS_TOKEN_LIFETIME}
    refresh-token-lifetime = 14400
    refresh-token-lifetime = ${?REFRESH_TOKEN_LIFETIME}
  }

  passivate-timeout = "2 minutes"
  max-user-history-events = 10000

  selection-algorithm {
    new-proposals-ratio = 0.0
    new-proposals-vote-threshold = 100
    tested-proposals-engagement-threshold = 0.80
    bandit-enabled = false
    bandit-min-count = 3
    bandit-proposals-ratio = 0
  }

  semantic {
    url = "http://localhost:9001"
    url = ${?SEMANTIC_URL}
  }

  zookeeper {
    url = "localhost:12181"
    url = ${?ZOOKEEPER_URL}
  }
  
}
